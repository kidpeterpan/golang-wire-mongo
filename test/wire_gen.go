// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package test

import (
	"github.com/marcusyip/golang-wire-mongo/app"
	"github.com/marcusyip/golang-wire-mongo/config"
	"github.com/marcusyip/golang-wire-mongo/core/logger"
	"github.com/marcusyip/golang-wire-mongo/db/migrates"
	"github.com/marcusyip/golang-wire-mongo/domains/access"
	"github.com/marcusyip/golang-wire-mongo/domains/account"
	"github.com/marcusyip/golang-wire-mongo/domains/auth"
	"github.com/marcusyip/golang-wire-mongo/domains/oauth2"
	"github.com/marcusyip/golang-wire-mongo/entities"
	"github.com/marcusyip/golang-wire-mongo/repositories"
	"github.com/marcusyip/golang-wire-mongo/test/factories"
	"github.com/marcusyip/golang-wire-mongo/web"
	"github.com/marcusyip/golang-wire-mongo/web/api"
	"github.com/marcusyip/golang-wire-mongo/web/api/controllers"
	"github.com/marcusyip/golang-wire-mongo/web/middlewares"
)

// Injectors from wire.go:

func BuildContainer(conf *config.Config) (*Container, error) {
	engine := app.NewGinEngine()
	client, err := repositories.NewClient(conf)
	if err != nil {
		return nil, err
	}
	database := repositories.NewDatabase(conf, client)
	mongoSession := middlewares.NewMongoSession(database)
	logrusLogger := logger.New()
	userRepository := repositories.NewUserRepository(database)
	accessRepository := repositories.NewAccessRepository(database)
	manager := access.NewManager(logrusLogger, userRepository, accessRepository)
	errorEntity := entities.NewErrorEntity()
	tokenAuthenticator := middlewares.NewTokenAuthenticator(logrusLogger, manager, userRepository, errorEntity)
	accountManager := account.NewManager(userRepository)
	authManager := auth.NewManager(accountManager, userRepository)
	accountEntity := entities.NewAccountEntity()
	registerController := controllers.NewRegisterController(logrusLogger, authManager, accountManager, accountEntity)
	accessEntity := entities.NewAccessEntity()
	accessController := controllers.NewAccessController(logrusLogger, authManager, manager, accessEntity)
	accountController := controllers.NewAccountController(accountManager, accountEntity)
	facebookProvider := oauth2.NewFacebookProvider(conf, accountManager, userRepository)
	oauth2Manager := oauth2.NewManager(logrusLogger, userRepository, facebookProvider)
	oauthFacebookController := controllers.NewOauthFacebookController(logrusLogger, oauth2Manager, manager, accessEntity)
	router := api.NewRouter(mongoSession, tokenAuthenticator, registerController, accessController, accountController, oauthFacebookController)
	server := web.NewServer(engine, router)
	appApp := app.NewApp(conf, server, client)
	migrationJob := migrates.NewMigrationJob(logrusLogger, database)
	accessFactory := factories.NewAccessFactory(accessRepository)
	userFactory := factories.NewUserFactory(accessFactory, authManager, userRepository)
	container := NewContainer(appApp, router, engine, client, database, migrationJob, userRepository, accessRepository, userFactory)
	return container, nil
}
